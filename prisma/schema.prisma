// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(cuid())  
  username    String
  email       String    @unique
  avatar      String?
  phone       String
  password    String
  isActive    Boolean   @default(true)
  cart        Cart[]
  orders      Order[]
  reviews     Review[]
  role        Role      @default(CUSTOMER)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum Role {
  ADMIN
  CUSTOMER
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id              String    @id @default(cuid()) 
  name            String    @unique    
  slug            String    @unique
  description     String
  price           Decimal   @db.Decimal(10,2)
  tax             Int?      @default(0)
  discount        Int?
  costPrice       Decimal?  @db.Decimal(10,2)
  orderItems      OrderItem[]
  cartItems       CartItem[]
  images          ProductImage[]
  categoryId      String?
  category        Category? @relation(fields: [categoryId], references: [id])
  reviews         Review[]
  avgRating       Decimal?  @db.Decimal(2,1)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([categoryId])
  @@index([id])
}

model ProductImage {
  id              String    @id @default(cuid())
  url             String    @unique
  altText         String?
  productId       String?
  product         Product?  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt       DateTime  @default(now())

  @@index([productId])
}

model Review {
  id              String    @id @default(cuid())
  productId       String
  product         Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  rating          Int
  content         String?
  isVerified      Boolean   @default(false)
  isApproved      Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([productId])
  @@index([userId])
  @@unique([productId, userId])
}

model Cart {
  id              String    @id @default(cuid())
  userId          String?
  user            User?     @relation(fields: [userId], references: [id])
  sessionId       String?
  items           CartItem[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([userId])
  @@index([sessionId])
}

model CartItem {
  id              String    @id @default(cuid())
  cartId          String
  cart            Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId       String
  product         Product   @relation(fields: [productId], references: [id])
  quantity        Int
  price           Decimal   @db.Decimal(10,2)

  @@index([cartId])
  @@index([productId])
}

model Order {
  id              String    @id @default(cuid())
  orderNumber     String    @unique
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  status          OrderStatus  @default(PENDING)
  subtotal        Decimal   @db.Decimal(10, 2)
  tax             Decimal   @default(0) @db.Decimal(10, 2)
  discount        Decimal   @default(0) @db.Decimal(10, 2)
  total           Decimal   @db.Decimal(10, 2)
  email           String
  phone           String?
  shippingAddress Json?
  items           OrderItem[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([userId])
  @@index([status])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

model OrderItem {
  id              String    @id @default(cuid())
  orderId         String
  order           Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId       String
  product         Product   @relation(fields: [productId], references: [id])
  quantity        Int
  price           Decimal    @db.Decimal(10, 2)

  @@index([orderId])
  @@index([productId])
}






